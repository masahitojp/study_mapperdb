package me.masahito

import java.util.Properties
import org.apache.commons.dbcp.BasicDataSourceFactory

import com.googlecode.mapperdao.utils.Setup
import me.masahito.dao._
import com.googlecode.mapperdao.jdbc.Transaction.{Propagation, Isolation}
import com.googlecode.mapperdao.jdbc.Transaction
import scala.io.Source
import grizzled.slf4j.Logger


object Try_mappperdb extends App {
  val logger = Logger[this.type]
  /**
   * DataBase settings
   */
  val properties = new Properties
  properties.load(getClass.getResourceAsStream("/jdbc.test.properties"))
  val dataSource = BasicDataSourceFactory.createDataSource(properties)

  // run ddl
  val con = dataSource.getConnection
  val stat = con.createStatement()
  val source = Source.fromInputStream(getClass.getResourceAsStream("/test.ddl"))
  try {
    val lines = source.getLines()
    lines.foreach(line => stat.execute(line))
  } finally {
    source.close()
    stat.close()
    con.close()
  }

  /**
   * mapping to Database
   */
  val (jdbc, mapperDao,queryDao,txManager) = Setup.h2(dataSource, List(PersonEntity, CompanyEntity))
  val tx = Transaction.get(txManager, Propagation.Nested, Isolation.ReadCommited, -1)

  // inserts person, company, in 1 transaction
  val person = new Person("Scott", new Company("Tiger"))
  val inserted = tx { () => mapperDao.insert(PersonEntity, person) }

  // print the autogenerated id and the person name
  logger.info(s"${inserted.id} ${inserted.name}")


}
