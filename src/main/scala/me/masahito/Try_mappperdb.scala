package me.masahito

import java.util.Properties
import org.apache.commons.dbcp.BasicDataSourceFactory

import com.googlecode.mapperdao.utils.Setup
import me.masahito.dao._
import com.googlecode.mapperdao.jdbc.Transaction.{Propagation, Isolation}
import com.googlecode.mapperdao.jdbc.Transaction
import scala.io.Source
import grizzled.slf4j.Logger
import com.googlecode.mapperdao.{Query, QueryConfig}

object Try_mappperdb extends App {
  val logger = Logger[this.type]
  /**
   * DataBase settings
   */
  val properties = new Properties
  properties.load(getClass.getResourceAsStream("/jdbc.test.properties"))
  val dataSource = BasicDataSourceFactory.createDataSource(properties)

  // run ddl
  val con = dataSource.getConnection
  val stat = con.createStatement()
  val source = Source.fromInputStream(getClass.getResourceAsStream("/test.ddl"))
  try {
    val lines = source.getLines()
    lines.foreach(line => stat.execute(line))
  } finally {
    source.close()
    stat.close()
    con.close()
  }

  /**
   * mapping to Database
   */
  val (jdbc, mapperDao,queryDao,txManager) = Setup.h2(dataSource, List(PersonEntity, CompanyEntity))
  val tx = Transaction.get(txManager, Propagation.Nested, Isolation.ReadCommited, -1)

  // inserts person, company, in 1 transaction
  val person = new Person("Scott", new Company("Tiger"))
  val inserted = tx { () => mapperDao.insert(PersonEntity, person) }

  // print the autogenerated id and the person name
  logger.info(s"${inserted.id} ${inserted.name} ${inserted.company.name}")

  // now update the company for this person
  val company2 = mapperDao.insert(CompanyEntity, new Company("Scala Inc"))
  val modified = new Person(inserted.name, company2)
  val updated = mapperDao.update(PersonEntity, inserted, modified) // no transaction here, but we could do the operation transactionally

  // and select it from the database
  val selected = mapperDao.select(PersonEntity, updated.id).get
  logger.info(s"${selected.id} ${selected.name} ${selected.company.name}")

  // finally, delete the row
  mapperDao.delete(PersonEntity, selected)

  val nintendo = new Company("Nintendo")
  val mario = new Person("Mario", nintendo)
  val luigi = new Person("Luigi", nintendo)
  val ins = tx { () => {
    mapperDao.insertBatch(PersonEntity, List(mario, luigi))
  } }

  import Query._
  // run some queries
  val pe=PersonEntity //alias
  val peopleAll=queryDao.query(select from pe) // get all
  // people is a list of Person with IntId
  peopleAll.foreach(person => logger.info(s"<peopleAll> ${person.id}, ${person.name}, ${person.company.name}"))

  // fetch only page 2 of all people
  val peoplePagenagtion=queryDao.query(QueryConfig.pagination(2, 2),select from pe)
  // people is a list of Person with IntId
  peoplePagenagtion.foreach(person => logger.info(s"<peoplePagination> ${person.id}, ${person.name}, ${person.company.name}"))


}
